# Bot config and secrets

# Bot identity
id:
  # Display name
  name: My Bot
  # Every bot gets its own GUID. Run uuidgen to get a fresh one.
  guid: fed828a8-64c8-4f46-a15d-93973724614c

# Required: At least one long-term memory service must be defined.
# Currently only Elasticsearch is supported.
memory:
  elastic:
    url: https://your-elasticsearch-instance.es.us-west-2.aws.found.io:443
    user: elastic-bot-user
    key: elastic-bot-password
    index_prefix: persyn

# Required: Prompt completion options. Enable one of these.
#
#   openai: https://beta.openai.com/account/api-keys
#  gooseai: https://goose.ai/dashboard/apikeys
# nlpcloud: https://nlpcloud.com/home/token

# Currently only openai is supported, others are experimental.
completion:
  engine: openai
  api_key: sk-your-api_key-goes-here
  model: text-davinci-003
  minimum_quality_score: -2.0
  temperature: 0.99

  # Optional: choose a spacy model. https://spacy.io/models/en
  # spacy_model: en_core_web_lg

# Required: Personality server (interact-server.py)
interact:
  url: http://localhost:8003

  # If running locally, specify the number of local workers to launch.
  #
  # This is only required if the hostname is not localhost, or if you
  # need more workers to handle the load.
  #
  # workers: 1

# Chat modules. Enable one or more of these to talk to your bot.
chat:
  # Slack chat module
  #
  slack:
    # From Slack management, Apps > Basic Information > App-Level Tokens
    app_token: xapp-your-app-token-here
    # From OAuth & Permission > Bot User OAuth Token
    bot_token: xoxb-your-bot-token-here

  # Discord chat module
  #
  # discord:
  #   token: your-discord-token-here
  #   webhook: https://discord.com/api/webhooks/path-to-your-webhook

  # Mastodon chat module
  #
  # Run masto-login.py to authenticate and generate the MASTODON_SECRET file.
  #
  # mastodon:
  #   instance: "https://mastodon.social/"
  #   secret: "/path/to/your/user.secret"
  #   toot_length: 500


# Optional, but recommended: Sentiment analysis engine
sentiment:
  engine: "flair"
  model: "en-sentiment"
  # engine: "spacy"
  # engine: "en_core_web_lg"

# Optional: Central Nervous System. Used for image generation and posting images
# to social media.
#
# If this is set, also provide AWS credentials (either ~/.aws/credentials,
# AWS environment variables, or an instance profile if running on EC2).
#
# The queue will be automatically created on first use.
#
# cns:
#   sqs_queue: example
#   aws_region: us-west-2

# Optional: Dream image generation server (dreams.py)
# dreams:
#   url: http://localhost:8001
#   gpus:
#     # CUDA number and a name for each local GPU to use for image generation
#     1: Nvidia 2080
#     2: Titan X
#     3: A100

#   # Image upload SCP destination and URL. Only required if generating images.
#   upload:
#     url_base: https://server.example.com/images/
#     dest_path: user@server.example.com:htdocs/images/
#     opts:

#   # Optional: Stable Diffusion image server (sdd.py)
#   stable_diffusion:
#     url: http://localhost:8005

#   # Optional: Prompt Parrot server for ðŸª„ prompt enhancement (prompt-parrot.py)
#   parrot:
#     url: http://localhost:8004

#   # Optional: CLIP Interrogator server for image recognition (interrogator.py)
#   captions:
#     url: http://localhost:9090

#   # Supported image engines. Only required if generating images.
#   engines:
#     stylegan2:
#       models:
#         - ffhq
#         - waifu
#     stable-diffusion:
